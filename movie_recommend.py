# -*- coding: utf-8 -*-
"""movie_recommendor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OFgNdkm70m3mlDtyluINvkpDDSMPm9aL

## MOVIE RECOMMENDATION

**IMPORTING LIBRARIES**
"""

import numpy as np
import pandas as pd
import ast
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import CountVectorizer

"""**OPENING THE FILES**"""

movies = pd.read_csv('tmdb_5000_movies.csv')
credits = pd.read_csv('tmdb_5000_credits.csv',error_bad_lines=False, engine="python")

#Merging the datasets
movies = movies.merge(credits, on = 'title')

movies.shape

#Importing necessary columns
movies = movies[['movie_id','title','genres','overview','keywords','cast','crew']]
movies.head(1)

"""**DATA PREPROCESSING**"""

movies.isnull().sum()

movies.dropna(inplace = True)

movies.duplicated().sum()

def convert(obj):
  L = []
  for i in ast.literal_eval(obj):
    L.append(i['name'])
  return L

movies['genres'] = movies['genres'].apply(convert)

movies['keywords'] = movies['keywords'].apply(convert)

def convert3(obj):
  L = []
  counter = 0
  for i in ast.literal_eval(obj):
    if counter<3:
      L.append(i['name'])
      counter+=1
    else:
      break
  return L

movies['cast'] = movies['cast'].apply(convert3)
movies.head(1)

def fetchdirector(obj):
  L = []
  for i in ast.literal_eval(obj):
    if i['job'] == 'Director':
      L.append(i['name'])
    else:
      break
  return L

movies['crew'] = movies['crew'].apply(fetchdirector)

movies['overview'] = movies['overview'].apply(lambda x:x.split())
movies.head()

movies['genres'] = movies['genres'].apply(lambda x:[i.replace(' ','') for i in x])
movies['cast'] = movies['cast'].apply(lambda x:[i.replace(' ','')  for i in x])
movies['crew'] = movies['crew'].apply(lambda x:[i.replace(' ','')  for i in x])
movies['keywords'] = movies['keywords'].apply(lambda x:[[i.replace(' ','')  for i in x]])
movies.head()

#Creating tags columns containing important information
movies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast'] + movies['crew']
movies.head()

#dataset sorted
new_df = movies[['movie_id','title','tags']]
new_df.head()

new_df['tags'] = new_df['tags'].apply(lambda x:' '.join(map(str,x)))

new_df.head()

!pip install nltk

#Applying stemming
from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()

def stem(text):
  y = []
  for i in text.split():
    y.append(ps.stem(i))

  return " ".join(y)

new_df['tags'] = new_df['tags'].apply(stem)

new_df['tags'] = new_df['tags'].apply(lambda x:x.lower())

new_df.head()

#Creating vectors
cv = CountVectorizer(max_features=5000, stop_words = 'english')
vectors = cv.fit_transform(new_df['tags']).toarray()

cv.get_feature_names_out()

similarity = cosine_similarity(vectors)

"""**Function to recommend similar movies**"""

def recommend(movie):
  movie_index = new_df[new_df['title'] == movie].index[0]
  distances = similarity[movie_index]
  movie_list = sorted(list(enumerate(distances)), reverse = True, key = lambda x:x[1])[1:6]
  for i in movie_list:
    print(new_df.iloc[i[0]].title)

recommend('Batman Begins')